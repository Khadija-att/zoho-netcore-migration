void automation.SandboxCPSellerMeetingCreated1(Int meetingID)
{
meetingData = zoho.crm.getRecordById("Events",meetingID);
info meetingData;
module = meetingData.get('Module');
if(module == "Property")
{
	WhatID = meetingData.get('What_Id');
	info WhatID;
	if(WhatID == null)
	{
		info "What_Id is null, skipping processing.";
		return;
	}
	PropertyId = WhatID.get('id');
	propertyData = zoho.crm.getRecordById("Products",PropertyId);
	info propertyData;
	acqChannelPartner = propertyData.get("Account_Name");
	if(acqChannelPartner == null || acqChannelPartner == "")
	{
		return;
	}
	cpID = acqChannelPartner.get("id");
	sellerLookup = propertyData.get("Seller");
	sellerID = sellerLookup.get("id");
	sellerData = zoho.crm.getRecordById("Sellers",sellerID);
	info sellerData;
	meetingEventData = Map();
	cpIDStr = cpID.toString();
	meetingEventData.put("Channel_Partner_Id",cpIDStr);
	status = meetingData.get("Visit_Status");
	info status;
	if(status == 'Scheduled' || status == 'Visit Scheduled' || status == 'Visit Schedule')
	{
		meetingEventData.put("activity_name","cp_seller_meeting_scheduled");
	}
	else
	{
		meetingEventData.put("activity_name","cp_seller_meeting_" + status.toLowerCase());
	}
	meetingEventData.put("User_Type","Channel Partner");
	meetingEventData.put("Meeting_time_start",ifnull(meetingData.get("Start_DateTime"),"NA"));
	meetingEventData.put("Meeting_created_time",ifnull(meetingData.get("Created_Time"),"NA"));
	meetingEventData.put("Property_name",ifnull(propertyData.get("Product_Name"),"NA"));
	meetingEventData.put("Property_status",ifnull(propertyData.get("Status"),"NA"));
	meetingEventData.put("Property_category",ifnull(propertyData.get("Product_Category"),"NA"));
	meetingEventData.put("Unit_Number",ifnull(propertyData.get("Unit"),"NA"));
	meetingEventData.put("google_maps_link",ifnull(propertyData.get("Google_Maps_Link"),"NA"));
	meetingEventData.put("cp_deal_type",ifnull(propertyData.get("Deal_Type"),"NA"));
	meetingEventData.put("seller_name",ifnull(sellerData.get("Name"),"NA"));
	meetingEventData.put("seller_phone",ifnull(sellerData.get("Phone_Number"),"NA"));
	meetingEventData.put("Tower",null);
	meetingEventData.put("Society",null);
	meetingEventData.put("Township",null);
	towerLookup = propertyData.get("Tower");
	info "Tower lookup raw value: " + towerLookup;
	if(towerLookup != null && towerLookup != "")
	{
		if(towerLookup.containKey("id"))
		{
			towerId = towerLookup.get("id");
			towerDetails = zoho.crm.getRecordById("Towers",towerId);
			info "Tower Details: " + towerDetails;
			if(towerDetails != null)
			{
				meetingEventData.put("Tower",ifnull(towerDetails.get("Name"),"NA"));
				meetingEventData.put("Society",ifnull(towerDetails.get("Society"),"NA"));
				meetingEventData.put("Township",ifnull(towerDetails.get("Township"),"NA"));
			}
		}
	}
	info "Final payload:" + meetingEventData;
	apiEndpoint = "https://qqvnbapdea.execute-api.ap-south-1.amazonaws.com/prod/sandbox-netcore-event";
	response = invokeurl
	[
		url :apiEndpoint
		type :POST
		parameters:meetingEventData.toString()
		headers:{"Content-Type":"application/json"}
	];
	info response;
	if(response != null)
	{
		info "Webhook sent successfully for Meeting ID: " + meetingID;
	}
	else
	{
		info "Failed to send webhook for Meeting ID: " + meetingID;
	}
}
}